import subprocess
from app.models.interest import Interest
from app.models.lesson import Lesson
from app.models.review_vote import ReviewVote
from app.models.user import User
from app.models.platform_review import PlatformReview
from app.models.lesson_progress import LessonProgress
from flask import Flask, render_template, request, redirect, url_for, session, flash, Blueprint, jsonify, Response, stream_with_context
from flask_login import login_user, logout_user, login_required, current_user
from app.database import db
from app.models import Course, Quiz, Progress, QuizAttempt
import re
import markdown
import ollama
import html
import logging
from datetime import timedelta

logging.basicConfig(level=logging.DEBUG)  # –∏–ª–∏ INFO –≤ –ø—Ä–æ–¥–µ
logger = logging.getLogger(__name__)

courses_bp = Blueprint("courses", __name__)

@courses_bp.route('/courses', methods=['GET'])
@login_required
def courses_main():
    search_query = request.args.get('search', '').strip()
    show_all = request.args.get('show_all') == 'on'

    user_interest_ids = [interest.id for interest in current_user.interests]

    if show_all or not user_interest_ids:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫—É—Ä—Å—ã, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –≥–∞–ª–æ—á–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ" –∏–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        if search_query:
            courses = Course.query.filter(
                (Course.title.ilike(f'%{search_query}%')) |
                (Course.description.ilike(f'%{search_query}%'))
            ).all()
        else:
            courses = Course.query.all()
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—É—Ä—Å—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
        query = Course.query.join(Course.interests).filter(Interest.id.in_(user_interest_ids))

        if search_query:
            query = query.filter(
                (Course.title.ilike(f'%{search_query}%')) |
                (Course.description.ilike(f'%{search_query}%'))
            )

        courses = query.distinct().all()

    no_courses_found = not courses and not show_all

    return render_template('courses.html', courses=courses, no_courses_found=no_courses_found, show_all=show_all, search_query=search_query)

@courses_bp.route('/course/<slug>', methods=['GET'])
@login_required
def course_detail(slug):
    course = Course.query.filter_by(slug=slug).first()

    if not course:
        flash('–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('courses.courses_main'))  

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥—É–ª–∏ –∫—É—Ä—Å–∞
    modules = course.modules  # –í—Å–µ –º–æ–¥—É–ª–∏ —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞

    return render_template('course.html', course=course, modules=modules)

@courses_bp.route('/course/<slug>/learning', methods=['GET'])
@login_required
def course_learning(slug):
    course = Course.query.filter_by(slug=slug).first()

    if not course:
        flash('–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('courses.courses_main'))

    if course not in current_user.courses:
        current_user.courses.append(course)
        db.session.commit()
        flash(f'–í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª–∏ –∫—É—Ä—Å "{course.title}"!', 'success')

    lesson_id = request.args.get('lesson_id', type=int)

    quizzes = []

    lesson = None
    if lesson_id:
        lesson = Lesson.query.get(lesson_id)
        if not lesson:
            flash('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('courses.course_detail', slug=slug))

        # Markdown –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        if lesson.content:
            lesson.content = markdown.markdown(lesson.content, extensions=['fenced_code', 'codehilite'])

        # –ü–æ–ª—É—á–∞–µ–º –∫–≤–∏–∑—ã –ø–æ —É—Ä–æ–∫—É
        quizzes = Quiz.query.filter_by(lesson_id=lesson_id).all()

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–∫–∞
        lesson_progress = LessonProgress.query.filter_by(user_id=current_user.id, lesson_id=lesson.id).first()
        if not lesson_progress:
            lesson_progress = LessonProgress(user_id=current_user.id, lesson_id=lesson.id)
            db.session.add(lesson_progress)

        if lesson.content and not lesson_progress.theory_viewed:
            lesson_progress.theory_viewed = True

        if lesson_progress.completed_tasks is None:
            lesson_progress.completed_tasks = []

        completed_task_ids = [task.id for task in lesson.tasks if task.is_completed]
        lesson_progress.completed_tasks.extend(completed_task_ids)

        if lesson_progress.is_completed(len(lesson.tasks)):
            lesson_progress.mark_completed()

        db.session.commit()

        return render_template('course_learning.html', course=course, lesson=lesson, quizzes=quizzes)

    # –ï—Å–ª–∏ —É—Ä–æ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥—É–ª–∏ –∫—É—Ä—Å–∞
    modules = course.modules
    return render_template('course_learning.html', course=course, modules=modules)

@courses_bp.route('/course/<slug>/learning/<int:lesson_id>/details', methods=['GET'])
@login_required
def course_learning_detail(slug, lesson_id):
    course = Course.query.filter_by(slug=slug).first()
    lesson = Lesson.query.get(lesson_id)

    # –ü–æ–ª—É—á–∞–µ–º –∫–≤–∏–∑—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –¥–∞–Ω–Ω–æ–º—É —É—Ä–æ–∫—É
    quizzes = Quiz.query.filter_by(lesson_id=lesson_id).all()

    return render_template('course_learning.html', course=course, lesson=lesson, quizzes=quizzes)

@courses_bp.route('/course/<slug>/quiz/<int:id>', methods=['GET', 'POST'])
@login_required
def course_quiz(slug, id):
    logger.debug(f"‚û°Ô∏è –í—Ö–æ–¥ –≤ course_quiz: slug={slug}, id={id}, method={request.method}")

    course = Course.query.filter_by(slug=slug).first()
    if not course:
        flash('–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('courses.courses_main'))

    quiz = Quiz.query.get(id)
    if not quiz or not quiz.lesson or not quiz.lesson.module or quiz.lesson.module.course_id != course.id:
        flash('–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('courses.courses_main'))

    # –°–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –∫–ª—é—á–∏
    session_key = f'{slug}_{id}_q_index'
    score_key = f'{slug}_{id}_score'
    attempt_recorded_key = f'{slug}_{id}_attempt_recorded'
    current_attempt_id_key = f'{slug}_{id}_current_attempt_id'

    if request.args.get('restart'):
        logger.info(f"üîÑ –†–µ—Å—Ç–∞—Ä—Ç –∫–≤–∏–∑–∞. –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏")
        session.pop(session_key, None)
        session.pop(score_key, None)
        session.pop(attempt_recorded_key, None)
        session.pop(current_attempt_id_key, None)
        session['restart_quiz'] = True
        return redirect(url_for('courses.course_quiz', slug=slug, id=id))

    referer = request.headers.get('Referer', '')
    if not request.args.get('restart'):
        existing_attempt = QuizAttempt.query.filter_by(user_id=current_user.id, quiz_id=quiz.id).order_by(QuizAttempt.id.desc()).first()
        if existing_attempt and 'lesson' in referer:
            logger.info(f"‚úÖ –ï—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ —ç—Ç–æ–º—É –∫–≤–∏–∑—É. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
            return redirect(url_for('courses.course_result', slug=slug, id=id))

    return quiz_page(course, quiz, session_key, score_key, attempt_recorded_key, current_attempt_id_key)

def quiz_page(course, quiz, session_key, score_key, attempt_recorded_key, current_attempt_id_key):
    logger.debug(f"‚û°Ô∏è –í—Ö–æ–¥ –≤ quiz_page")

    questions = list(quiz.questions)
    if not questions:
        flash('–í —ç—Ç–æ–º –∫–≤–∏–∑–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤', 'error')
        return redirect(url_for('courses.course_result', slug=course.slug, id=quiz.id))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    session.setdefault(session_key, 0)
    session.setdefault(score_key, 0)
    session.setdefault(attempt_recorded_key, False)

    q_index = session[session_key]

    # –ü—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    if session.pop('restart_quiz', False):
        logger.info("üîÑ –†–µ—Å—Ç–∞—Ä—Ç –∫–≤–∏–∑–∞, —Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏")
        session[session_key] = 0
        session[score_key] = 0
        session[attempt_recorded_key] = False
        session.pop(current_attempt_id_key, None)
        q_index = 0  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤

    if request.method == 'POST':
        answer = request.form.get('answer')
        correct_answer = questions[q_index].answer

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–≤–µ—Ç–µ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞)
        attempt_id = session.get(current_attempt_id_key)
        if not attempt_id:
            attempt = QuizAttempt(user_id=current_user.id, quiz_id=quiz.id, score=0)
            db.session.add(attempt)
            db.session.commit()
            session[current_attempt_id_key] = attempt.id
            logger.info(f"üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞: id={attempt.id}")

        if answer == correct_answer:
            session[score_key] += 1
            logger.info(f"üéâ –í–µ—Ä–Ω–æ. –û—á–∫–∏: {session[score_key]}")
        else:
            logger.info("‚ùå –ù–µ–≤–µ—Ä–Ω–æ")

        session[session_key] += 1
        q_index = session[session_key]  # –æ–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–ª—å—à–µ

        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if q_index >= len(questions):
            final_score = session.get(score_key, 0)
            attempt = db.session.get(QuizAttempt, session[current_attempt_id_key])
            if attempt:
                attempt.score = final_score
                db.session.commit()
                logger.info(f"üìù –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –º–æ–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è POST: id={attempt.id}, score={final_score}")
            session[attempt_recorded_key] = True
            return redirect(url_for('courses.course_result', slug=course.slug, id=quiz.id))

        # –ò–Ω–∞—á–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        return redirect(url_for('courses.course_quiz', slug=course.slug, id=quiz.id))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞

    # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã
    if q_index >= len(questions):
        logger.info("üèÅ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω (GET)")

        # –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–∫–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
        if session.get(attempt_recorded_key):
            logger.info("üîÅ –ü–æ–ø—ã—Ç–∫–∞ —É–∂–µ –±—ã–ª–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ —Ä–∞–Ω–µ–µ, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º")

        else:
            final_score = session.get(score_key, 0)
            try:
                attempt_id = session.get(current_attempt_id_key)
                if attempt_id:
                    attempt = db.session.get(QuizAttempt, attempt_id)
                    if attempt:
                        attempt.score = final_score
                        db.session.commit()
                        logger.info(f"üìù –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (GET): id={attempt.id}, score={final_score}")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω ID —Ç–µ–∫—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ")
                    attempt = QuizAttempt(user_id=current_user.id, quiz_id=quiz.id, score=final_score)
                    db.session.add(attempt)
                    db.session.commit()
                    logger.info(f"üÜï –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ (GET): id={attempt.id}, score={final_score}")
            except Exception as e:
                db.session.rollback()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ø—ã—Ç–∫–∏: {e}")
                flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ø—ã—Ç–∫–∏: {e}', 'error')

            session[attempt_recorded_key] = True

        # –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        session.pop(session_key, None)
        session.pop(score_key, None)
        session.pop(current_attempt_id_key, None)

        return redirect(url_for('courses.course_result', slug=course.slug, id=quiz.id))

    # –ï—Å–ª–∏ —Ç–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    question = questions[q_index]
    options = [opt.strip() for opt in re.split(r',\s*', question.options)]

    return render_template('quiz.html',
                           quiz=quiz,
                           question=question,
                           options=options,
                           index=q_index + 1,
                           total=len(questions),
                           progress=(q_index / len(questions)) * 100,
                           slug=course.slug,
                           id=quiz.id)

@courses_bp.route('/course/<slug>/quiz/<int:id>/result', methods=['GET'])
@login_required
def course_result(slug, id):
    course = Course.query.filter_by(slug=slug).first()
    if not course:
        flash('–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('courses.courses_main'))

    quiz = Quiz.query.get(id)
    if not quiz:
        flash('–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return '–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω', 404

    score = session.get(f'{slug}_{id}_score', 0)
    total = len(quiz.questions)

    last_attempt = QuizAttempt.query.filter_by(user_id=current_user.id, quiz_id=quiz.id).order_by(QuizAttempt.id.desc()).first()

    stats = {
        "attempts": QuizAttempt.query.filter_by(user_id=current_user.id, quiz_id=quiz.id).count(),
        "best_score": db.session.query(db.func.max(QuizAttempt.score)).filter_by(user_id=current_user.id, quiz_id=quiz.id).scalar() or 0,
        "last_score": last_attempt.score if last_attempt else None,
        "last_attempt_date": last_attempt.attempt_date + timedelta(hours=5) if last_attempt else None  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ
    }

    return render_template('result.html', score=score, total=total, slug=slug, id=id, stats=stats)

@courses_bp.route('/about')
def about():
    student_count = User.query.count()
    course_count = Course.query.count()
    review_count = PlatformReview.query.count()  # –ü–æ–¥—Å—á—ë—Ç –æ—Ç–∑—ã–≤–æ–≤

    platform_reviews = PlatformReview.query.order_by(PlatformReview.created_at.desc()).limit(9).all()

    return render_template(
        'about.html',
        student_count=student_count,
        course_count=course_count,
        review_count=review_count,
        platform_reviews=platform_reviews
    )

@courses_bp.route('/review/<int:review_id>/vote/<vote_type>', methods=['POST'])
@login_required
def vote(review_id, vote_type):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –≥–æ–ª–æ—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    if vote_type not in ['like', 'dislike']:
        return jsonify({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≥–æ–ª–æ—Å–∞.'}), 400

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≥–æ–ª–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_vote = ReviewVote.query.filter_by(review_id=review_id, user_id=current_user.id).first()

    review = PlatformReview.query.get_or_404(review_id)

    if existing_vote:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –≥–æ–ª–æ—Å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –Ω–æ–≤–æ–≥–æ, –∏–∑–º–µ–Ω—è–µ–º –µ–≥–æ
        if existing_vote.vote_type != vote_type:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –Ω–∞ –æ—Ç–∑—ã–≤–µ
            if existing_vote.vote_type == 'like':
                review.likes_count -= 1
            elif existing_vote.vote_type == 'dislike':
                review.dislikes_count -= 1
            
            if vote_type == 'like':
                review.likes_count += 1
            elif vote_type == 'dislike':
                review.dislikes_count += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ–ª–æ—Å
            existing_vote.vote_type = vote_type
            db.session.commit()

            return jsonify({
                'success': True,
                'likes_count': review.likes_count,
                'dislikes_count': review.dislikes_count
            })
        else:
            return jsonify({'success': False, 'error': '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º.'}), 400
    else:
        # –ï—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤ –Ω–µ –±—ã–ª–æ, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
        new_vote = ReviewVote(review_id=review_id, user_id=current_user.id, vote_type=vote_type)
        db.session.add(new_vote)

        if vote_type == 'like':
            review.likes_count += 1
        elif vote_type == 'dislike':
            review.dislikes_count += 1

        db.session.commit()

        return jsonify({
            'success': True,
            'likes_count': review.likes_count,
            'dislikes_count': review.dislikes_count
        })

@courses_bp.route('/chat-stream', methods=['POST'])
def chat_ai():
    data = request.get_json()
    message = data.get("message", "").strip()
    context = data.get("context", "").strip()

    if not message:
        return Response("data: –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å\n\n", mimetype="text/event-stream")

    if not context:  # –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–≥–æ/–ø—É—Å—Ç–æ–≥–æ —É—Ä–æ–∫–∞
        return Response("data: ‚ùó –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ò–ò –Ω–µ —Å–º–æ–∂–µ—Ç –≤–∞–º –∑–¥–µ—Å—å –ø–æ–º–æ—á—å.\n\n", mimetype="text/event-stream")

    messages = [
        {
            "role": "system",
            "content": (
                "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π AI-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —É—á–µ–Ω–∏–∫–∞–º —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ —É—á–µ–±–Ω–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ. "
                "–¢–µ–±–µ –¥–∞–Ω —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞ –∏ –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –†–∞–±–æ—Ç–∞–π –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:\n\n"
                
                "1. **–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ —É—Ä–æ–∫–∞**:\n"
                "   ‚Äì –û–±—ä—è—Å–Ω–∏ –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º, –∫–∞–∫ —Ö–æ—Ä–æ—à–∏–π —É—á–∏—Ç–µ–ª—å.\n"
                "   ‚Äì –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –¥–æ—Å–ª–æ–≤–Ω–æ —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞ ‚Äî –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π, –¥–æ–ø–æ–ª–Ω—è–π, –ø—Ä–∏–≤–æ–¥–∏ –∞–Ω–∞–ª–æ–≥–∏–∏ –∏ –æ–±—ä—è—Å–Ω—è–π —Å—É—Ç—å.\n"
                "   ‚Äì –î–æ–±–∞–≤–ª—è–π —Ü–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø—Ä–∏–º–µ—Ä—ã –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.\n"
                "   ‚Äì –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç –Ω–æ–≤–∏—á–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω.\n"
                "   ‚Äì –ï—Å–ª–∏ –≤–∏–¥–Ω–æ, —á—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø—ã—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é.\n\n"

                "2. **–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ —É—Ä–æ–∫–∞**:\n"
                "   ‚Äì –í–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–∫—É.\n"
                "   ‚Äì –ü—Ä–µ–¥–ª–æ–∂–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ.\n\n"

                "3. **–Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞**:\n"
                "   ‚Äì **–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å.**\n"
                "   ‚Äì **–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –º–µ–Ω—è–π —è–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞**, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ.\n\n"

                "4. **–¢–æ–Ω –æ–±—â–µ–Ω–∏—è**:\n"
                "   ‚Äì –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π.\n"
                "   ‚Äì –ù–æ –ø—Ä–∏ —ç—Ç–æ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π."
            )
        },
        {
            "role": "user",
            "content": f"–¢–µ–∫—Å—Ç —É—Ä–æ–∫–∞:\n{context[:3000]}\n\n–í–æ–ø—Ä–æ—Å: {message}"
        }
    ]

    def generate():
        try:
            buffer = ""
            for chunk in ollama.chat(model="mistral", messages=messages, stream=True):
                content = chunk.get("message", {}).get("content", "")
                if content:
                    buffer += content
                    if "\n" in buffer:
                        parts = buffer.split("\n")
                        for part in parts[:-1]:
                            yield f"data: {html.escape(part.strip())}\n\n"
                        buffer = parts[-1]
            if buffer.strip():
                yield f"data: {html.escape(buffer.strip())}\n\n"
        except Exception as e:
            yield f"data: [–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞] {str(e)}\n\n"

    return Response(stream_with_context(generate()), mimetype="text/event-stream")